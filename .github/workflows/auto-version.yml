name: Auto Version Bump

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - '.gitignore'

jobs:
  auto-version:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip version]')"

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install UV
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH

    - name: Install dependencies
      run: |
        uv sync

    - name: Configure Git
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"

    - name: Check if version bump is needed
      id: version-check
      run: |
        # Get current version
        CURRENT_VERSION=$(uv run python scripts/version.py get)
        echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

        # Check if this is a feature branch merge (minor bump)
        if [[ "${{ github.event.head_commit.message }}" =~ ^feat: ]]; then
          echo "bump_type=minor" >> $GITHUB_OUTPUT
          echo "should_bump=true" >> $GITHUB_OUTPUT
        # Check if this is a breaking change (major bump)
        elif [[ "${{ github.event.head_commit.message }}" =~ ^BREAKING CHANGE: ]] || [[ "${{ github.event.head_commit.message }}" =~ ^feat\(.*\)!: ]]; then
          echo "bump_type=major" >> $GITHUB_OUTPUT
          echo "should_bump=true" >> $GITHUB_OUTPUT
        # Default to patch bump
        else
          echo "bump_type=patch" >> $GITHUB_OUTPUT
          echo "should_bump=true" >> $GITHUB_OUTPUT
        fi

    - name: Bump version
      if: steps.version-check.outputs.should_bump == 'true'
      run: |
        echo "Bumping ${{ steps.version-check.outputs.bump_type }} version..."
        uv run python scripts/version.py bump ${{ steps.version-check.outputs.bump_type }}

        # Get the new version
        NEW_VERSION=$(uv run python scripts/version.py get)
        echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
        echo "New version: $NEW_VERSION"

    - name: Commit version bump
      if: steps.version-check.outputs.should_bump == 'true'
      run: |
        git add pyproject.toml VERSION
        git commit -m "chore: bump version to v${{ env.NEW_VERSION }} [skip ci]"
        git push origin main

    - name: Create version tag
      if: steps.version-check.outputs.should_bump == 'true'
      run: |
        git tag "v${{ env.NEW_VERSION }}"
        git push origin "v${{ env.NEW_VERSION }}"
