name: Release

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      skip_tests:
        description: 'Skip tests (for emergency releases)'
        required: false
        default: false
        type: boolean

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
      packages: write
      issues: write
      pull-requests: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for version bumping

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install UV (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        powershell -c "irm https://astral.sh/uv/install.ps1 | iex"

    - name: Install UV (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH

    - name: Install dependencies
      run: |
        uv sync

    - name: Set up virtual display (Ubuntu only)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y xvfb
        export DISPLAY=:99
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &

    - name: Run tests (Ubuntu)
      if: ${{ !github.event.inputs.skip_tests && matrix.os == 'ubuntu-latest' }}
      run: |
        echo "Running tests on Ubuntu..."
        export DISPLAY=:99
        uv run make test

    - name: Run tests (Windows/macOS)
      if: ${{ !github.event.inputs.skip_tests && matrix.os != 'ubuntu-latest' }}
      run: |
        echo "Running tests on ${{ matrix.os }}..."
        uv run make test

    - name: Build executable (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        echo "Building executable for Ubuntu..."
        export DISPLAY=:99
        uv run python scripts/build_tray.py

    - name: Build executable (Windows/macOS)
      if: matrix.os != 'ubuntu-latest'
      run: |
        echo "Building executable for ${{ matrix.os }}..."
        uv run python scripts/build_tray.py

    - name: Create release package
      run: |
        echo "Creating release package for ${{ matrix.os }}..."
        # Create platform-specific directory
        PLATFORM_NAME=""
        if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
          PLATFORM_NAME="linux"
        elif [ "${{ matrix.os }}" = "windows-latest" ]; then
          PLATFORM_NAME="windows"
        elif [ "${{ matrix.os }}" = "macos-latest" ]; then
          PLATFORM_NAME="macos"
        fi

        # Create final package directory
        mkdir -p dist/$PLATFORM_NAME

        # Copy built files to platform directory
        if [ -d "dist/$PLATFORM_NAME" ]; then
          echo "Found platform-specific build directory"
          # Files are already in the right place
        else
          echo "Moving files to platform directory"
          # Move files from dist/ to dist/$PLATFORM_NAME/
          mkdir -p dist/$PLATFORM_NAME
          cp -r dist/* dist/$PLATFORM_NAME/ 2>/dev/null || true
        fi

        # List what we have
        echo "Release package contents:"
        find dist/$PLATFORM_NAME -type f | head -10

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-${{ matrix.os }}
        path: |
          dist/
        retention-days: 7

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      issues: write
      pull-requests: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install UV
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH

    - name: Install dependencies
      run: |
        uv sync

    - name: Configure Git
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"

    - name: Bump version
      run: |
        echo "Bumping ${{ github.event.inputs.version_type }} version..."
        uv run python scripts/version.py bump ${{ github.event.inputs.version_type }}

        # Get the new version
        NEW_VERSION=$(uv run python scripts/version.py get)
        echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
        echo "New version: $NEW_VERSION"

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/

    - name: Prepare release files
      run: |
        echo "Preparing release files..."
        mkdir -p release-packages

        # Copy artifacts from each platform
        for platform in ubuntu-latest windows-latest macos-latest; do
          if [ -d "artifacts/build-$platform" ]; then
            echo "Processing $platform artifacts..."
            # Copy the entire dist directory structure
            cp -r artifacts/build-$platform/dist/* release-packages/ || true
          fi
        done

        # List all files
        echo "Release files:"
        find release-packages/ -type f | head -20

        # Create a summary of what we have
        echo "Platform directories found:"
        find release-packages/ -type d -name "linux" -o -name "windows" -o -name "macos" | head -10

    - name: Check if tag exists
      run: |
        NEW_VERSION=$(uv run python scripts/version.py get)
        echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
        TAG_NAME="v$NEW_VERSION"
        echo "Checking if tag $TAG_NAME exists..."
        if git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
          echo "⚠️  Tag $TAG_NAME already exists!"
          echo "Deleting existing tag..."
          git tag -d "$TAG_NAME" || true
          git push origin ":refs/tags/$TAG_NAME" || true
        else
          echo "✅ Tag $TAG_NAME does not exist, proceeding with release"
        fi

    - name: Commit version bump
      run: |
        NEW_VERSION=$(uv run python scripts/version.py get)
        git add pyproject.toml VERSION
        git commit -m "Bump version to v$NEW_VERSION" || echo "No changes to commit"
        git push origin main

    - name: Create and push tag
      run: |
        NEW_VERSION=$(uv run python scripts/version.py get)
        TAG_NAME="v$NEW_VERSION"
        echo "Creating tag $TAG_NAME..."
        git tag -a "$TAG_NAME" -m "Release $TAG_NAME"
        git push origin "$TAG_NAME"

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ env.NEW_VERSION }}
        name: NIA Engineering Portal v${{ env.NEW_VERSION }}
        body: |
          ## What's New in v${{ env.NEW_VERSION }}

          - Cross-platform tray application
          - Web-based configuration interface
          - Comprehensive testing framework
          - Performance optimizations
          - Accessibility improvements

          ## Installation

          1. Download the appropriate package for your platform
          2. Extract the archive
          3. Run the installer script: `./install-<platform>.sh`

          ## System Requirements

          - Python 3.12 or higher
          - Modern web browser
          - 50MB available disk space

          ## Files

          See the attached files for platform-specific packages.
        files: |
          release-packages/linux/*
          release-packages/windows/*
          release-packages/macos/*
          release-packages/*.tar.gz
          release-packages/*.sh
          release-packages/RELEASE_NOTES.md
        draft: false
        prerelease: false
        generate_release_notes: true
        make_latest: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
