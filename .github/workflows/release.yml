name: Release Build

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      skip_tests:
        description: 'Skip tests (for faster builds)'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  packages: write
  issues: write
  pull-requests: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            platform: linux
            arch: x64
          - os: windows-latest
            platform: windows
            arch: x64
          - os: macos-latest
            platform: macos
            arch: x64
          - os: macos-latest
            platform: macos
            arch: arm64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install UV
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Install dependencies
      run: uv sync

    - name: Run tests (Ubuntu)
      if: matrix.os == 'ubuntu-latest' && !github.event.inputs.skip_tests
      run: |
        export DISPLAY=:99
        sudo apt-get update
        sudo apt-get install -y xvfb
        Xvfb :99 -screen 0 1024x768x24 &
        uv run make test

    - name: Run tests (Windows/macOS)
      if: matrix.os != 'ubuntu-latest' && !github.event.inputs.skip_tests
      run: uv run make test

    - name: Build executable (Ubuntu/macOS)
      if: matrix.os != 'windows-latest'
      run: |
        echo "Building for ${{ matrix.platform }} (${{ matrix.arch }})"

        # Create output directory
        mkdir -p dist/${{ matrix.platform }}-${{ matrix.arch }}

        # Build with PyInstaller
        if [ "${{ matrix.platform }}" = "macos" ] && [ "${{ matrix.arch }}" = "arm64" ]; then
          # Build ARM64 version on macOS
          arch -arm64 uv run pyinstaller --clean --distpath dist/${{ matrix.platform }}-${{ matrix.arch }} tray_app.spec
        else
          # Build regular version
          uv run pyinstaller --clean --distpath dist/${{ matrix.platform }}-${{ matrix.arch }} tray_app.spec
        fi

        # Verify build
        echo "Build contents:"
        ls -la dist/${{ matrix.platform }}-${{ matrix.arch }}/

        # Create archive
        cd dist
        tar -czf ${{ matrix.platform }}-${{ matrix.arch }}.tar.gz ${{ matrix.platform }}-${{ matrix.arch }}/
        cd ..

    - name: Build executable (Windows)
      if: matrix.os == 'windows-latest'
      shell: cmd
      run: |
        echo Building for windows (x64)

        rem Create output directory
        if not exist "dist\windows-x64" mkdir "dist\windows-x64"

        rem Build with PyInstaller
        uv run pyinstaller --clean --distpath dist\windows-x64 tray_app.spec

        rem Verify build
        echo Build contents:
        dir "dist\windows-x64" /B

        rem Create archive
        cd dist
        powershell -Command "Compress-Archive -Path 'windows-x64' -DestinationPath 'windows-x64.zip' -Force"
        cd ..

    - name: Upload build artifacts (Ubuntu/macOS)
      if: matrix.os != 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.platform }}-${{ matrix.arch }}
        path: dist/${{ matrix.platform }}-${{ matrix.arch }}.tar.gz
        retention-days: 30

    - name: Upload build artifacts (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.platform }}-${{ matrix.arch }}
        path: dist/${{ matrix.platform }}-${{ matrix.arch }}.zip
        retention-days: 30

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install UV
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Install dependencies
      run: uv sync

    - name: Configure Git
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        git config --global --add safe.directory $GITHUB_WORKSPACE

    - name: Bump version
      run: |
        echo "Bumping ${{ github.event.inputs.version_type }} version..."
        uv run python scripts/version.py bump ${{ github.event.inputs.version_type }}

        # Get the new version
        NEW_VERSION=$(uv run python scripts/version.py get)
        echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
        echo "New version: $NEW_VERSION"

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/

    - name: Prepare release files
      run: |
        echo "Preparing release files..."
        mkdir -p release-packages

        # Copy all platform archives
        for artifact in artifacts/*/; do
          platform=$(basename "$artifact")
          echo "Processing $platform..."
          if [ -f "$artifact/$platform.tar.gz" ]; then
            echo "Found tar.gz for $platform"
            cp "$artifact/$platform.tar.gz" release-packages/
          elif [ -f "$artifact/$platform.zip" ]; then
            echo "Found zip for $platform"
            cp "$artifact/$platform.zip" release-packages/
          else
            echo "No archive found for $platform"
            echo "Contents of $platform artifact:"
            ls -la "$artifact"
          fi
        done

        # List what we have
        echo "Release files:"
        ls -la release-packages/

    - name: Create tag
      run: |
        NEW_VERSION=$(uv run python scripts/version.py get)
        echo "Creating tag v$NEW_VERSION..."

        # Check if tag exists
        if git rev-parse "v$NEW_VERSION" >/dev/null 2>&1; then
          echo "Tag v$NEW_VERSION already exists, deleting..."
          git tag -d "v$NEW_VERSION"
          git push origin ":refs/tags/v$NEW_VERSION" || true
        fi

        # Create and push tag
        git add .
        git commit -m "Bump version to v$NEW_VERSION" || echo "No changes to commit"
        git tag "v$NEW_VERSION"

        # Push using the GitHub token
        git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
        git push origin main
        git push origin "v$NEW_VERSION"

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ env.NEW_VERSION }}
        name: Release v${{ env.NEW_VERSION }}
        body: |
          # NIA Engineering Portal v${{ env.NEW_VERSION }}

          ## Downloads

          Choose the appropriate file for your platform:

          - **macOS Intel (x64)**: `macos-x64.tar.gz`
          - **macOS Apple Silicon (ARM64)**: `macos-arm64.tar.gz`
          - **Windows (x64)**: `windows-x64.zip`
          - **Linux (x64)**: `linux-x64.tar.gz`

          ## Installation

          1. Download the appropriate file for your platform
          2. Extract the archive
          3. Run the `nia-engineering-portal` executable

          ## Features

          - Cross-platform desktop application
          - System tray integration
          - Web-based configuration
          - Local web server for engineering portal
        files: release-packages/*
        draft: false
        prerelease: false
        generate_release_notes: true
        make_latest: true
