name: Release

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      skip_tests:
        description: 'Skip tests (for emergency releases)'
        required: false
        default: false
        type: boolean

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      issues: write
      pull-requests: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for version bumping

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install UV
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH

    - name: Install dependencies
      run: |
        uv sync

    - name: Set up virtual display
      run: |
        sudo apt-get update
        sudo apt-get install -y xvfb
        export DISPLAY=:99
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &

    - name: Configure Git
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"

    - name: Bump version
      run: |
        echo "Bumping ${{ github.event.inputs.version_type }} version..."
        uv run python scripts/version.py bump ${{ github.event.inputs.version_type }}

        # Get the new version
        NEW_VERSION=$(uv run python scripts/version.py get)
        echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
        echo "New version: $NEW_VERSION"

    - name: Run tests
      if: ${{ !github.event.inputs.skip_tests }}
      run: |
        echo "Running tests..."
        export DISPLAY=:99
        uv run make test

    - name: Build release packages
      run: |
        echo "Building release packages..."
        export DISPLAY=:99
        if [ "${{ github.event.inputs.skip_tests }}" = "true" ]; then
          uv run python scripts/build_release.py --skip-tests
        else
          uv run python scripts/build_release.py
        fi

    - name: List build artifacts
      run: |
        echo "Build artifacts:"
        ls -la dist/ || echo "No dist directory found"
        echo "Files to upload:"
        find dist/ -name "*.tar.gz" -o -name "*.sh" -o -name "RELEASE_NOTES.md" | head -10

    - name: Check if tag exists
      run: |
        TAG_NAME="v${{ env.NEW_VERSION }}"
        echo "Checking if tag $TAG_NAME exists..."
        if git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
          echo "⚠️  Tag $TAG_NAME already exists!"
          echo "Deleting existing tag..."
          git tag -d "$TAG_NAME" || true
          git push origin ":refs/tags/$TAG_NAME" || true
        else
          echo "✅ Tag $TAG_NAME does not exist, proceeding with release"
        fi

    - name: Commit version bump
      run: |
        git add pyproject.toml VERSION
        git commit -m "Bump version to v${{ env.NEW_VERSION }}" || echo "No changes to commit"
        git push origin main

    - name: Create and push tag
      run: |
        TAG_NAME="v${{ env.NEW_VERSION }}"
        echo "Creating tag $TAG_NAME..."
        git tag -a "$TAG_NAME" -m "Release $TAG_NAME"
        git push origin "$TAG_NAME"

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ env.NEW_VERSION }}
        name: NIA Engineering Portal v${{ env.NEW_VERSION }}
        body: |
          ## What's New in v${{ env.NEW_VERSION }}

          - Cross-platform tray application
          - Web-based configuration interface
          - Comprehensive testing framework
          - Performance optimizations
          - Accessibility improvements

          ## Installation

          1. Download the appropriate package for your platform
          2. Extract the archive
          3. Run the installer script: `./install-<platform>.sh`

          ## System Requirements

          - Python 3.12 or higher
          - Modern web browser
          - 50MB available disk space

          ## Files

          See the attached files for platform-specific packages.
        files: |
          dist/*.tar.gz
          dist/*.sh
          dist/RELEASE_NOTES.md
        draft: false
        prerelease: false
        generate_release_notes: true
        make_latest: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Verify release creation
      run: |
        echo "Verifying release was created..."
        TAG_NAME="v${{ env.NEW_VERSION }}"
        if git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
          echo "✅ Tag $TAG_NAME exists"
        else
          echo "❌ Tag $TAG_NAME not found"
          exit 1
        fi

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-packages-v${{ env.NEW_VERSION }}
        path: dist/
        retention-days: 30
