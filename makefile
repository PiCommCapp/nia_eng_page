# NIA Engineering Portal - Makefile

# Default port for the development server
PORT ?= 9001

.PHONY: help serve serve-port install update clean status kill tray build-tray test-tray

# Default target
help:
	@echo "NIA Engineering Portal - Available Commands:"
	@echo ""
	@echo "  make serve      - Start the development server (port $(PORT))"
	@echo "  make serve-port - Start server with custom port (PORT=3000 make serve-port)"
	@echo "  make kill       - Kill any running server instances"
	@echo "  make install    - Install UV and Python dependencies"
	@echo "  make update     - Update dependencies using UV"
	@echo "  make status     - Check project status and dependencies"
	@echo "  make clean      - Clean up temporary files"
	@echo ""
	@echo "Tray Application Commands:"
	@echo "  make tray       - Run the tray application (requires display)"
	@echo "  make test-tray  - Test tray application components"
	@echo "  make build-tray - Build executable for current platform"
	@echo ""

# Start the development server
serve:
	@echo "üöÄ Starting NIA Engineering Portal server..."
	@echo "üìç Server will be available at: http://localhost:$(PORT)"
	@echo "üõë Press Ctrl+C to stop the server"
	@echo ""
	PORT=$(PORT) uv run python scripts/serve.py

# Start server with custom port
serve-port:
	@echo "üöÄ Starting NIA Engineering Portal server on port $(PORT)..."
	@echo "üìç Server will be available at: http://localhost:$(PORT)"
	@echo "üõë Press Ctrl+C to stop the server"
	@echo ""
	PORT=$(PORT) uv run python scripts/serve.py

# Kill any running server instances
kill:
	@echo "üõë Stopping NIA Engineering Portal server instances..."
	@echo "  ‚Ä¢ Killing processes on port $(PORT)..."
	@if lsof -ti:$(PORT) > /dev/null 2>&1; then \
		echo "  ‚Ä¢ Found process on port $(PORT)"; \
		lsof -ti:$(PORT) | xargs kill -9 2>/dev/null || true; \
		echo "‚úÖ Server process on port $(PORT) stopped"; \
	else \
		echo "  ‚Ä¢ No process found on port $(PORT)"; \
	fi
	@echo "‚úÖ Kill command completed!"

# Install Python dependencies
install:
	@echo "üì¶ Checking UV installation..."
	@which uv > /dev/null || (echo "‚ùå UV not found. Please install UV first:" && echo "   curl -LsSf https://astral.sh/uv/install.sh | sh" && exit 1)
	@echo "‚úÖ UV found at $$(which uv)"
	@echo "üîß Creating virtual environment and installing dependencies..."
	uv venv
	uv sync
	@echo "‚úÖ Installation complete!"

# Update dependencies
update:
	@echo "üîÑ Updating dependencies using UV..."
	uv sync --upgrade
	@echo "‚úÖ Dependencies updated successfully"

# Check project status
status:
	@echo "üìä NIA Engineering Portal - Project Status"
	@echo ""
	@echo "üîß Environment:"
	@echo "  ‚Ä¢ Python: $$(python3 --version 2>/dev/null || echo 'Not found')"
	@echo "  ‚Ä¢ UV: $$(uv --version 2>/dev/null || echo 'Not found')"
	@echo "  ‚Ä¢ Virtual Environment: $$(if [ -d .venv ]; then echo '‚úÖ Created'; else echo '‚ùå Not created'; fi)"
	@echo ""
	@echo "üìÅ Project Structure:"
	@echo "  ‚Ä¢ Pages Directory: $$(if [ -d pages ]; then echo '‚úÖ Exists'; else echo '‚ùå Missing'; fi)"
	@echo "  ‚Ä¢ Scripts Directory: $$(if [ -d scripts ]; then echo '‚úÖ Exists'; else echo '‚ùå Missing'; fi)"
	@echo "  ‚Ä¢ Documentation: $$(if [ -d docs ]; then echo '‚úÖ Exists'; else echo '‚ùå Missing'; fi)"
	@echo ""
	@echo "üì¶ Dependencies:"
	@if [ -f pyproject.toml ]; then \
		echo "  ‚Ä¢ Project Config: ‚úÖ pyproject.toml found"; \
		if [ -d .venv ]; then \
			echo "  ‚Ä¢ Dependencies: $$(uv pip list --format=freeze | wc -l | tr -d ' ') packages installed"; \
		else \
			echo "  ‚Ä¢ Dependencies: ‚ùå Virtual environment not created"; \
		fi; \
	else \
		echo "  ‚Ä¢ Project Config: ‚ùå pyproject.toml not found"; \
	fi
	@echo ""

# Clean up temporary files
clean:
	@echo "üßπ Cleaning up temporary files..."
	@echo "  ‚Ä¢ Removing Python cache files..."
	@find . -type f -name "*.pyc" -delete 2>/dev/null || true
	@find . -type d -name "__pycache__" -delete 2>/dev/null || true
	@echo "  ‚Ä¢ Removing system files..."
	@echo "  ‚Ä¢ Removing build artifacts..."
	@rm -rf build/ dist/ *.spec
	@echo "‚úÖ Cleanup complete"
	@echo ""

# Tray Application Commands

# Run the tray application (requires display)
tray:
	@echo "üñ•Ô∏è  Starting NIA Engineering Portal Tray Application..."
	@echo "‚ö†Ô∏è  Note: This requires a display (X11/Wayland on Linux)"
	@echo ""
	uv run python tray_app/main.py

# Test tray application components
test-tray:
	@echo "üß™ Testing tray application components..."
	@echo "  ‚Ä¢ Testing configuration manager..."
	@uv run python -c "from tray_app.config_manager import ConfigManager; cm = ConfigManager(); print('‚úì Config manager working')"
	@echo "  ‚Ä¢ Testing server controller..."
	@uv run python -c "from tray_app.server_controller import ServerController; from tray_app.config_manager import ConfigManager; cm = ConfigManager(); sc = ServerController(cm); print('‚úì Server controller working')"
	@echo "  ‚Ä¢ Testing GUI components..."
	@uv run python -c "from tray_app.gui_components import ConfigurationDialog; from tray_app.config_manager import ConfigManager; cm = ConfigManager(); print('‚úì GUI components working')"
	@echo "‚úÖ All tray application components working"
	@echo ""

# Build executable for current platform
build-tray:
	@echo "üî® Building tray application executable..."
	@echo "  ‚Ä¢ Platform: $$(uname -s)"
	@echo "  ‚Ä¢ Using PyInstaller with UV..."
	@uv run python scripts/build_tray.py
	@echo "‚úÖ Build complete"
	@echo "  ‚Ä¢ Executable location: dist/$$(uname -s | tr '[:upper:]' '[:lower:]')/"
	@echo ""
